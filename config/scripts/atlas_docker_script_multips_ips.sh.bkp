#!/bin/bash

log_file="/config/logs/docker.log"
hosts_file="/config/logs/docker_hosts.log"
db_file="/config/db/atlas.db"

declare -A gateway_cache

# Function to extract container network info
extract_container_info() {
    docker inspect "$1" | jq -r '
        .[0] as $c |
        if ($c.NetworkSettings.Networks | length) > 0 then
            $c.NetworkSettings.Networks | to_entries[] |
            [$c.Id, $c.Name, .key, .value.IPAddress, .value.MacAddress] | @tsv
        else
            [$c.Id, $c.Name, "", "", ""] | @tsv
        end
    '
}

# Collect container info
docker ps -a -q | while read -r cid; do
    extract_container_info "$cid"
done > "$log_file"

# Generate host info
exec > "$hosts_file"
while read -r cid name network ip mac; do
    short_name="${name##/}"
    image=$(docker inspect -f '{{.Config.Image}}' "$cid")
    os=$(docker image inspect "$image" --format '{{.Os}}' 2>/dev/null)
    os=${os:-unknown}

    ports=$(docker inspect "$cid" |
        jq -r '.[0].NetworkSettings.Ports // {} | to_entries[]? |
        if .value[0].HostIp == null or .value[0].HostPort == null
        then "\(.key) (internal)"
        else "\(.key) -> \(.value[0].HostIp):\(.value[0].HostPort)"
        end' | paste -sd, -)
    ports=${ports:-no_ports}

    nexthop=$(docker network inspect "$network" 2>/dev/null |
        grep -B 5 "\"$ip\"" | grep '"Gateway":' | awk -F '"' '{print $4}')

    # Fallback gateway
    if [[ -z "$nexthop" || "$nexthop" == "null" || "$nexthop" =~ ^172\.1[6-9]\.0\.1$ || "$nexthop" =~ ^172\.2[0-9]\.0\.1$ || "$nexthop" =~ ^172\.3[0-1]\.0\.1$ ]]; then
        nexthop=$(docker info --format '{{.Swarm.NodeAddr}}' 2>/dev/null)
        if [[ "$nexthop" == *"not found"* || "$nexthop" == *"error"* || -z "$nexthop" ]]; then
            nexthop="${gateway_cache[$network]}"
            nexthop=${nexthop:-unavailable}
        fi
    fi
    if [[ "$nexthop" != "unavailable" ]]; then
        gateway_cache["$network"]=$nexthop
    fi

    printf "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" "$cid" "$ip" "$short_name" "$os" "$mac" "$ports" "$nexthop" "$network"
done < "$log_file"

# Insert/update database using container ID as PK with correct online_status
while IFS=$'\t' read -r cid ip name os_details mac_address open_ports next_hop network_name; do
    status=$(docker inspect -f '{{.State.Status}}' "$cid")
    if [[ "$status" == "running" ]]; then
        online_status="online"
    else
        online_status="offline"
    fi

    sqlite3 "$db_file" <<EOF
INSERT OR REPLACE INTO docker_hosts (id, ip, name, os_details, mac_address, open_ports, next_hop, network_name, last_seen, online_status)
VALUES ('$cid', '$ip', '$name', '$os_details', '$mac_address', '$open_ports', '$next_hop', '$network_name', CURRENT_TIMESTAMP, '$online_status');
EOF
done < "$hosts_file"

# Remove stale records by container id
current_ids=$(cut -f1 "$hosts_file" | sort | uniq | tr '\n' ',' | sed 's/,$//')
sqlite3 "$db_file" <<EOF
DELETE FROM docker_hosts
WHERE id NOT IN ($(echo "'$current_ids'" | sed "s/,/','/g"));
EOF